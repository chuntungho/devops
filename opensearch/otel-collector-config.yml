# https://opentelemetry.io/docs/collector/configuration/
extensions:
  basicauth/data-prepper:
    client_auth: 
      username: oteluser
      password: dataprepper

# Data sources: traces, metrics, logs
receivers:
  otlp/java-agent:
    protocols:
      grpc:

# Data sources: traces, metrics, logs
processors:
  batch:
  # https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/processor/tailsamplingprocessor
  # filter out health check or others
  # TODO apply latency/probabilistic policy over filter
  tail_sampling:
    policies:
      - name: filter-out-noisy
        type: string_attribute
        string_attribute:
          key: http.target
          values: [\/metrics, \/actuator*, \/health, favicon\.ico]
          enabled_regex_matching: true
          invert_match: true

exporters:
  # Data sources: traces, metrics, logs
  otlp/data-prepper:
    endpoint: data-prepper:21890
    auth:
      authenticator: basicauth/data-prepper
    tls:
    #  insecure: true
      insecure_skip_verify: true

  logging:

  # Data sources: metrics (beta)
  prometheusremotewrite:
    # For official Prometheus (e.g. running via Docker)
    # argument: --enable-feature=remote-write-receiver
    endpoint: 'http://prometheus:9090/api/v1/write'
    tls:
      insecure: true

service:
  extensions:
    - basicauth/data-prepper
  pipelines:
    traces:
      receivers: [otlp/java-agent]
      processors: [tail_sampling, batch]
      exporters: [otlp/data-prepper]
    metrics:
      receivers: [otlp/java-agent]
      processors: [batch]
      exporters: [logging, prometheusremotewrite]